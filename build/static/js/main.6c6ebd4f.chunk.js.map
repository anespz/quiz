{"version":3,"sources":["Style.js","Cards/QuestionCard.js","Cards/MenuCard.js","Cards/ResultsCard.js","Container.js","App.js","serviceWorker.js","index.js"],"names":["StyleSheet","create","card","backgroundColor","flex","flexDirection","alignItems","justifyContent","paddingTop","paddingBottom","marginHorizontal","width","title","fontSize","textAlign","padding","container","subtitle","listelement","buttonview","table","row","borderWidth","borderColor","cell","border","QuestionCard","props","state","activity","order","jsonUrl","fullUrl","proxyUrl","this","round","answer","o","jsonObj","act","getActivityObj","i","questions","length","qu","user_answers","unshift","Promise","resolve","reject","setState","console","log","j","qu2","userAnswer","updateJsonObj","then","newJsonObj","fetch","method","headers","body","JSON","stringify","response","json","path","history","location","pathname","redirect","catch","error","getNumQuestions","push","getNumRounds","nextRound","nextQuestion","update","getQuestionObj","stimulus","updateAnswer","bind","View","className","style","styles","Text","getTitle","onClick","question","Component","withRouter","MenuCard","obj","name","heading","map","a","split","join","toLowerCase","to","getActivityList","ResultsCard","results","k","val","is_correct","items","Object","keys","r1","getRoundObj","results1","getResults","r2","results2","getRowsData","r","getTable","toUpperCase","Container","ok","Error","doc","activities","activity_name","exact","updateJSON","fetchJSON","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c6ebd4f.chunk.js","sourcesContent":["import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n    card: {\n        backgroundColor: 'white', flex: 1,\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        paddingTop: '50px',\n        paddingBottom: '50px',\n        marginHorizontal: '50px',\n        width: '80%',\n    },\n    title: {\n        fontSize: 40,\n        textAlign: 'center',\n        padding: '10px'\n    },\n    container: {\n        flex: 1,\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingTop: '10px',\n        paddingBottom: '10px',\n    }, \n    subtitle: {\n        fontSize: 20,\n        textAlign: 'center',\n        padding: '10px'\n    }, \n    listelement: {\n        fontSize: 15,\n        textAlign: 'center',\n        padding: '10px'\n    },\n    buttonview: {\n        flexDirection: 'row',\n    }, \n    table: {\n        padding: '10px',\n        textAlign: 'center',\n        flexDirection: 'col'\n    },\n    row: {\n        padding: '10px',\n        borderWidth: '1px',\n        borderColor: '#f4f4f4',\n        flexDirection: 'row'\n    }, \n    cell: {\n        padding: '10px',\n        border: '1px',\n        borderColor: '#f4f4f4'\n    }\n\n});","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { View, Text } from 'react-native'\nimport styles from '../Style.js'\n\n/**\n * The \n */\nclass QuestionCard extends Component {\n\n  constructor(props) {\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/'; // Added to avoid CORS during development.\n    var fullUrl = proxyUrl + 'https://s3.eu-west-2.amazonaws.com/interview.mock.data/payload.json';\n    super(props);\n    this.state = {\n      activity: '',\n      order: '',\n      jsonUrl: { fullUrl },\n    };\n  }\n\n\n  getTitle() {\n    if (this.props.activity === 'Activity One') {\n      return this.props.activity;\n    } else {\n      return this.props.activity + ' / ROUND ' + this.state.round;\n    }\n  }\n\n\n\n  /**\n   * Finds the exact location in the JSON doc to edit based \n   * on the QuestionCard state. \n   * @param {*} o \n   * @param {*} answer \n   * @returns Promise, resolves to state.jsonObj. \n   */\n  updateJsonObj(answer) {\n    let o = this.props.jsonObj;\n    let act = this.props.getActivityObj('' + this.props.activity);\n    for (let i = 0; i < act.questions.length; i++) {\n      var qu = act.questions[i];\n      if (this.props.activity === 'Activity One') { // Activity Two\n        if (qu.order === this.state.order) {\n          qu.user_answers.unshift(answer); // most recent answer will be collected from user_answers[0]\n          return new Promise((resolve, reject) => {\n            this.setState({\n              jsonObj: o\n            }, () => { console.log('UPDATED'); resolve(this.props.jsonObj) })\n          });\n        }\n      } else { // Activity Two\n        if (qu.order === this.state.round) {\n          for (let j = 0; j < qu.questions.length; j++) {\n            let qu2 = qu.questions[j];\n            if (qu2.order === this.state.order) {\n              qu2.user_answers.unshift(answer); // most recent answer will be collected from user_answers[0]\n              return new Promise((resolve, reject) => {\n                this.setState({\n                  jsonObj: o\n                }, () => { console.log('UPDATED'); resolve(this.props.jsonObj) })\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n\n  /**\n   * Responsible for fetching, modifying, and reuploading the JSON file\n   * when the AnswerButton is clicked. Will not scale well with big databases, \n   * but is sufficient for this case. \n   * @param {*} userAnswer \n   */\n  updateAnswer(userAnswer) {\n    console.log('answer = ' + userAnswer)\n    this.updateJsonObj(userAnswer)\n      .then((newJsonObj) => {\n        fetch('http://localhost:3000/payload', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(newJsonObj),\n        })\n          .then((response) => response.json())\n          .then(() => {\n            let path = this.props.history.location.pathname + '/results/'\n            this.redirect(path);\n          })\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  }\n\n\n  getNumQuestions() {\n    let act = this.props.getActivityObj('' + this.props.activity);\n    if (this.props.activity === 'Activity One') {\n      return act.questions.length;\n    } else { // Activity Two\n      for (let i = 0; i < act.questions.length; i++) {\n        let qu = act.questions[i];\n        if (qu.order === this.state.round) {\n          return qu.questions.length\n        }\n      }\n    }\n  }\n\n\n  getNumRounds() {\n    let act = this.props.getActivityObj(this.props.activity);\n    if (this.props.activity === 'Activity Two') {\n      return act.questions.length;\n    } else {\n      console.log('this activity has no rounds');\n    }\n  }\n\n\n  /**\n   * When a question is answered, use this function to decide: \n   * go to next question, next round, or to a new card?\n   * Missing is a redirect to a \"New Round\" card with a timer\n   * in between sets of rounds, but ran out of time. \n   * \n   * @param {String} path - the new path to push to history\n   */\n  redirect(path) {\n    if (this.state.order === this.getNumQuestions()) {\n      if (this.props.activity === 'Activity One') {\n        this.props.history.push(path);\n      } else { // Activity Two\n        if (this.state.round === this.getNumRounds()) {\n          this.props.history.push(path);\n        }\n        let nextRound = this.state.round + 1;\n        this.setState({ order: 1, round: nextRound });\n      }\n    } else {\n      let nextQuestion = this.state.order + 1;\n      this.setState({ order: nextQuestion });\n    }\n  }\n\n\n  /**\n   * This render is a bit troublesome, as the wait for this.props.jsonObj\n   * does not fully hinder the error messages caused by the async fetch in Container.js. \n   * An alternative approach should probably be used. \n   * \n   * Gets question info from its Parent component, Container, which holds the jsonObj and \n   * relevant data retrieval functions. \n   */\n  render() {\n    let qu = '';\n    let update = () => console.log(\"update: null\");\n    if (this.props.jsonObj) { // check if the object has loaded\n      let act = this.props.activity;\n      qu = this.props.getQuestionObj(act, this.state.round, this.state.order).stimulus;\n      update = this.updateAnswer.bind(this);\n    }\n    return (\n      <View className=\"QuestionCard\" style={styles.card}>\n        <Text style={styles.title}>\n          {this.getTitle()}\n        </Text>\n        <Text style={styles.subtitle}>\n          Q{this.state.order}.\n        </Text>\n        <Text style={styles.listelement}>\n          {qu}\n        </Text>\n        <View style={styles.buttonview}>\n          <button onClick={() => update('CORRECT')}>{'CORRECT'} </button>\n          <button onClick={() => update('INCORRECT')}>{'INCORRECT'} </button>\n        </View>\n      </View>\n    );\n  }\n\n  /**\n   * Maybe not needed. \n   */\n  componentDidMount() {\n    this.setState({ order: this.props.question, activity: this.props.activity })\n    if (this.props.activity === 'Activity Two') {\n      this.setState({ round: this.props.round, jsonObj: this.props.jsonObj });\n    }\n  }\n}\n\nexport default withRouter(QuestionCard);\n","import React, { Component } from 'react';\nimport { Link, withRouter } from \"react-router-dom\";\nimport styles from '../Style.js'\nimport {View, Text} from 'react-native';\n\nclass MenuCard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n\n  /**\n   * Get JSX for the title and subtitle\n   */\n  getTitle() {\n    let obj = this.props.jsonObj;\n    return (\n      <View style={styles.container}>\n        <Text style={styles.title}>\n          {obj.name}\n        </Text>\n        <Text style={styles.subtitle}>\n          {obj.heading}\n        </Text>\n      </View>\n    );\n  }\n\n  /**\n   * Get JSX for the activities, using a mock list where only Activity One and Two \n   * have been given working links. \n   */\n  getActivityList() {\n    const activities = [{ \"name\": \"Activity One\" }, { \"name\": \"Activity Two\" }, { \"name\": \"Activity Three\" }, { \"name\": \"Activity Four\" }, { \"name\": \"Activity Five\" }];\n    const listActivities = activities.map((a) => {\n      if (a.name === 'Activity One' || a.name === 'Activity Two') {\n        let path = a.name.split(' ').join('').toLowerCase();\n        return <Text style={styles.listelement}><Link to={path}>{a.name}</Link></Text>\n      } else\n        return <Text style={styles.listelement}>{a.name}</Text>\n    }\n    );\n    return listActivities;\n  }\n\n  /**\n   * Will wait for the jsonObj to load before retrieving the \n   * title for the page. The rest is rendered as usual. \n   */\n  render() {\n    let title = <div> </div>;\n    if (this.props.jsonObj) {\n      title = this.getTitle();\n    }\n    return (\n      <View className=\"MenuCard\" style={styles.card}>\n        <View className=\"title\" style={{ justifyContent: 'center'}}>\n          {title}\n        </View>\n        <View style={styles.container}>\n          {this.getActivityList()}\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default withRouter(MenuCard);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport styles from '../Style.js';\nimport { View, Text } from 'react-native';\n\nclass ResultsCard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            activity: '',\n            order: '',\n            results: {}\n        }\n    }\n\n    /**\n     * Get results from the json document.\n     * @param {*} questionObj - an object containing an activity (task one) or a round (task two)\n     */\n    getResults(obj) {\n        let results = {}\n        for (let j = 0; j < obj.questions.length; j++) {\n            var qu = obj.questions[j];\n            let k = qu.order;\n            let val = qu.is_correct === (qu.user_answers[0] === 'CORRECT');\n            results[k] = val;\n            console.log(results);\n        }\n        return results;\n    }\n\n    /**\n     * Get the JSX for the table rows\n     * @param {Object} results - either a round object or an activity object\n     */\n    getRowsData(results) {\n        let items = results;\n        return Object.keys(items).map((row) => {\n            console.log('row: ' + row + '  value: ' + items[row])\n            return (<View style={styles.row}>\n                <Text style={styles.cell}> {'Q' + row} </Text>\n                <Text style={styles.cell} > {'' + items[row]} </Text>\n            </View>)\n        });\n\n    }\n    /**\n     * Get the JSX for the table element. \n     */\n    getTable() {\n        let name = this.props.activity;\n        console.log(name);\n        if (name === 'Activity Two') {\n            let r1 = this.props.getRoundObj(name, 1);\n            let results1 = this.getResults(r1);\n            let r2 = this.props.getRoundObj(name, 2);\n            let results2 = this.getResults(r2);\n            return (\n                <View style={styles.table}>\n                    <Text style={styles.row}> Round 1 </Text>\n                    {this.getRowsData(results1)}\n                    <Text style={styles.row}>Round 2</Text>\n                    {this.getRowsData(results2)}\n                </View>\n            )\n        } else {\n            let r = this.props.getActivityObj(name);\n            let results = this.getResults(r);\n            return (\n                <View style={styles.table}>\n                    {this.getRowsData(results)}\n                </View>\n            )\n\n        }\n    }\n\n    /**\n     * Works similar to redirect in QuestionCard.\n     */\n    redirect() {\n        this.props.history.push('/menu');\n    }\n\n    /**\n     * Wait for the jsonObj before trying to access data for the table. \n     */\n    render() {\n        let table = <div />\n        if (this.props.jsonObj) {\n            table = this.getTable();\n        }\n        return (\n            <View style={styles.card}>\n                <Text style={styles.title}> {this.state.activity.toUpperCase()} </Text>\n                <Text style={styles.subtitle}> {'Results'.toUpperCase()} </Text>\n                <View >\n                    {table}\n                </View>\n                <View style={styles.buttonview}>\n                    <button onClick={this.redirect.bind(this)}> MENU </ button>\n                </View>\n            </View>\n        );\n    }\n\n    componentDidMount() {\n        console.log('did mount!');\n        this.setState({ order: this.props.question, activity: this.props.activity })\n    }\n}\n\nexport default withRouter(ResultsCard);\n","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport QuestionCard from './Cards/QuestionCard.js';\nimport './App.css';\nimport styles from './Style.js'\nimport { Route } from 'react-router-dom'\nimport MenuCard from './Cards/MenuCard.js';\nimport ResultsCard from './Cards/ResultsCard.js';\nimport {View} from 'react-native'\n\nclass Container extends Component {\n\n    constructor(props) {\n        // Note: ended up using a local copy of the .json file (./mockAPI.json) for testing, \n        // that I ran on a local server (http://localhost:3000/payload') using 'json-server --watch mockAPI.json'\n        var proxyUrl = 'https://cors-anywhere.herokuapp.com/'; // Hacky, but can be added to avoid CORS during development.\n        var fullUrl = proxyUrl + 'https://s3.eu-west-2.amazonaws.com/interview.mock.data/payload.json';\n        super(props);\n        this.state = {\n            jsonUrl: { fullUrl },\n            jsonObj: null\n        };\n    }\n\n    /**\n     * Fetches the full API document (not good for scale) once component is mounted.\n     * Stores it as state.jsonObj. Because fetch is async, this has caused some bugs\n     * when later accessing the jsonObj, eg. the error we get at first load of the question cards. \n     * \n     * The temporary solution to run through the demo is to refresh the page, which fixes it. \n     */\n    fetchJSON() {\n        var proxyUrl = 'https://cors-anywhere.herokuapp.com/'; // Added to avoid CORS during development.\n        fetch('http://localhost:3000/payload')\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                return response;\n            })\n            .then(response => response.json())\n            .then(doc => {\n                this.setState({\n                    jsonObj: doc,\n                }, () => {\n                    console.log('state set!!!');\n                });\n            })\n            .catch(error => console.log('Error:', error));\n    }\n\n    /**\n     * Return activity object (contains either question objects or \"question objects\" that are actually rounds)\n     */\n    getActivityObj(name) {\n        console.log(this.state.jsonObj);  \n        let o = this.state.jsonObj;\n        for (let i = 0; i < o.activities.length; i++) {\n            let act = o.activities[i];\n            if (act.activity_name === name) {\n                return act;\n            }\n        }\n    }\n\n    /**\n     * Return round object (contains question objects)\n     * @param {String} name - the type of activity \n     * @param {Int} round - the round order\n     */\n    getRoundObj(name, round) {\n        console.log('getting round')\n        let act = this.getActivityObj(name);\n        for (let i = 0; i < act.questions.length; i++) {\n            let r = act.questions[i];\n            if (r.order === round) {\n                console.log('return round');\n                console.log(r);\n                return r;\n            }\n        }\n    }\n\n    /**\n     * Returns a question object (contains the details for each question)\n     * @param {String} name - the type of activity \n     * @param {Int} round - the round order\n     * @param {Int} order - the question order\n     */\n    getQuestionObj(name, round, order) {\n        let obj = null;\n        if (name === 'Activity Two') {\n            obj = this.getRoundObj(name, round)\n        }\n        else {\n            obj = this.getActivityObj(name);\n        }\n        for (let j = 0; j < obj.questions.length; j++) {\n            let qu = obj.questions[j];\n            if (qu.order === order) {\n                return qu;\n            }\n        }\n    }\n\n    /**\n     * Render with routing - depending on which path is pushed to history, \n     * render the route with that path. \n     * \n     * Properties of each card are currently a bit bloated. \n     */\n    render() {\n        return (\n            <View className=\"container\" style={styles.container}>\n                <Route exact path='/activityone'>\n                    {/* <QuestionCard activity='Activity One' question={1} jsonObj={this.state.jsonObj} updateJSON={this.fetchJSON} /> */}\n                    <QuestionCard activity='Activity One'\n                        question={1}\n                        getQuestionObj={this.getQuestionObj.bind(this)}\n                        getActivityObj={this.getActivityObj.bind(this)}\n                        jsonObj={this.state.jsonObj}\n                        updateJSON={this.fetchJSON} />\n                </Route>\n                <Route exact path='/activitytwo'>\n                    <QuestionCard activity='Activity Two'\n                        round={1} question={1}\n                        getQuestionObj={this.getQuestionObj.bind(this)}\n                        getActivityObj={this.getActivityObj.bind(this)}\n                        jsonObj={this.state.jsonObj}\n                        updateJSON={this.fetchJSON} />\n                </Route>\n                <Route exact path='/menu'>\n                    <MenuCard jsonObj={this.state.jsonObj}/>\n                </Route>\n                <Route exact path='/activityone/results'>\n                    <ResultsCard activity='Activity One' \n                    getQuestionObj={this.getQuestionObj.bind(this)}\n                    getRoundObj={this.getRoundObj.bind(this)} \n                    getActivityObj={this.getActivityObj.bind(this)}\n                    jsonObj={this.state.jsonObj} />\n                </Route>\n                <Route exact path='/activitytwo/results'>\n                    <ResultsCard activity='Activity Two' \n                    getQuestionObj={this.getQuestionObj.bind(this)}\n                    getRoundObj={this.getRoundObj.bind(this)} \n                    getActivityObj={this.getActivityObj.bind(this)}\n                    jsonObj={this.state.jsonObj} />\n                </Route>\n            </View>\n        );\n    }\n\n\n    componentDidMount() {\n        console.log('mounting container')\n        this.fetchJSON();\n        console.log('mount done')\n    }\n\n\n}\n\nexport default withRouter(Container);\n","import React from 'react';\nimport './App.css';\nimport Container from './Container.js';\n\n\nfunction App() {\n  return (\n      <Container />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n    ,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}